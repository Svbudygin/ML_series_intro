import json
from pathlib import Path
from typing import List, Dict, Tuple, Optional

import numpy as np
import pandas as pd

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç compute_iou
from src.evaluate import compute_iou


def load_windows(path: Path) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å DataFrame —Å –æ–∫–Ω–∞–º–∏-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏–∑ parquet.
    """
    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª —Å –æ–∫–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    df = pd.read_parquet(path)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_cols = {'episode_id', 'start', 'end', 'intro_score'}
    missing = required_cols - set(df.columns)
    if missing:
        raise ValueError(f"–í DataFrame –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing}")
    return df


def load_gt(path: Path) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å ground truth, –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü episode_id.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü 'url' –∏ —Å—Ç–æ–ª–±—Ü—ã 'start', 'end' —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏.
    """
    if not path.exists():
        raise FileNotFoundError(f"CSV —Å GT –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    gt = pd.read_csv(path)
    if 'url' not in gt.columns:
        raise ValueError("–í GT –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'url'")
    # –í—ã–¥–µ–ª—è–µ–º episode_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (stem)
    gt['episode_id'] = gt['url'].apply(lambda u: Path(u).stem)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã 'start' –∏ 'end'
    for col in ['start', 'end']:
        if col not in gt.columns:
            raise ValueError(f"–í GT –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{col}'")
    return gt


def load_json(path: Path) -> Optional[Dict]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ —Ñ–∞–π–ª–∞, –≤–µ—Ä–Ω—É—Ç—å dict –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    if not path.exists():
        print(f"[INFO] –§–∞–π–ª JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
        return None
    try:
        text = path.read_text(encoding="utf-8")
        return json.loads(text)
    except json.JSONDecodeError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ {path}: {e}")


def post_with_thr(
    df_windows: pd.DataFrame,
    thr: float
) -> List[Dict]:
    """
    –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–∫–æ–Ω df_windows –∏ –ø–æ—Ä–æ–≥–∞ thr —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É –Ω–∞ —ç–ø–∏–∑–æ–¥:
    –±–µ—Ä—ë—Ç –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π start) —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –≥–¥–µ intro_score >= thr.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict: {"episode_id": ..., "start": float, "end": float}.
    """
    out = []
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ episode_id
    for ep, grp in df_windows.groupby("episode_id"):
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É
        cand = grp[grp.intro_score >= thr]
        if cand.empty:
            # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ø–∏–∑–æ–¥
            continue
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ start, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ
        first = cand.nsmallest(1, 'start').iloc[0]
        out.append({
            "episode_id": ep,
            "start": float(first.start),
            "end": float(first.end)
        })
    return out


def compute_mean_iou_for_thresholds(
    df_windows: pd.DataFrame,
    gt: pd.DataFrame,
    thresholds: List[float]
) -> List[Tuple[float, float]]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ thr –≤ thresholds —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π IoU:
      1) —Å—Ç—Ä–æ–∏—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π post_with_thr
      2) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ GT –≤—ã—á–∏—Å–ª—è–µ—Ç IoU –º–µ–∂–¥—É —Å–ø–∏—Å–∫–æ–º GT-–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
         (start/end –∏–∑ gt) –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–æ–º (—Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω—ã 0 –∏–ª–∏ 1)
      3) –µ—Å–ª–∏ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, compute_iou –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0 –∏–ª–∏
         –≤—ã –º–æ–∂–µ—Ç–µ —è–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ª—É—á–∞–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (thr, mean_iou).
    """
    results: List[Tuple[float, float]] = []
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ GT –ø–æ —ç–ø–∏–∑–æ–¥–∞–º –∑–∞—Ä–∞–Ω–µ–µ:
    gt_groups = {ep: group[['start', 'end']].values.tolist()
                 for ep, group in gt.groupby("episode_id")}
    all_episodes = list(gt_groups.keys())

    for thr in thresholds:
        segs = post_with_thr(df_windows, thr)
        # –ü–æ—Å—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å episode_id -> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        pred_dict = {item['episode_id']: [(item['start'], item['end'])] for item in segs}
        ious = []
        for epi in all_episodes:
            gt_intervals = gt_groups[epi]
            pr_intervals = pred_dict.get(epi, [])
            # compute_iou –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: list of [start, end] –∏–ª–∏ list of tuples?
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ compute_iou –ø—Ä–∏–Ω–∏–º–∞–µ—Ç list –∏–∑ [start, end] —Å–ø–∏—Å–∫–æ–≤:
            # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pr_intervals –∏–∑ [(s,e)] –≤ [[s,e]] –Ω–∞–ø—Ä–∏–º–µ—Ä.
            pr_list = [[float(s), float(e)] for (s, e) in pr_intervals]
            try:
                iou = compute_iou(gt_intervals, pr_list)
            except Exception as e:
                # –ï—Å–ª–∏ compute_iou –ø–∞–¥–∞–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
                print(f"[WARN] –û—à–∏–±–∫–∞ compute_iou –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ {epi}, thr={thr}: {e}")
                iou = 0.0
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ compute_iou –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
            if iou is None:
                iou = 0.0
            ious.append(iou)
        mean_iou = float(np.mean(ious)) if ious else 0.0
        results.append((thr, mean_iou))
    return results


def find_best_threshold(results: List[Tuple[float, float]]) -> Tuple[float, float]:
    """
    –ò–∑ —Å–ø–∏—Å–∫–∞ (thr, mean_iou) –Ω–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º mean_iou.
    """
    if not results:
        return 0.0, 0.0
    best = max(results, key=lambda x: x[1])
    return best


def main():
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º; —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    windows_path = Path("data/processed/windows_pred.parquet")
    gt_path = Path("data/interim/cleaned_labels.csv")
    json_path = Path("results/intro_segments.json")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–∫–Ω–∞...")
    dfw = load_windows(windows_path)
    print(f"–í—Å–µ–≥–æ –æ–∫–æ–Ω: {len(dfw)}")

    print("–ó–∞–≥—Ä—É–∂–∞–µ–º GT...")
    gt = load_gt(gt_path)
    n_rows_gt = len(gt)
    n_eps = gt['episode_id'].nunique()
    print(f"GT-—Å—Ç—Ä–æ–∫: {n_rows_gt}, —ç–ø–∏–∑–æ–¥–æ–≤: {n_eps}")

    # 2) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    preds_ref = load_json(json_path)
    if preds_ref is not None:
        print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–∏–∫—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (intro_segments).")
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preds_ref –ø–æ –∑–∞–¥–∞—á–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    else:
        print("–§–∞–π–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø–æ—Ä–æ–≥–æ–≤
    thresholds = list(np.linspace(0.1, 0.9, 17))
    print(f"–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ—Ä–æ–≥–∏: {thresholds}")

    # 4) –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π IoU –¥–ª—è –∫–∞–∂–¥–æ–≥–æ thr
    print("–í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π IoU –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞...")
    results = compute_mean_iou_for_thresholds(dfw, gt, thresholds)

    # 5) –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π
    best_thr, best_iou = find_best_threshold(results)
    print(f"üéØ –õ—É—á—à–∏–π –ø–æ—Ä–æ–≥: {best_thr:.2f}, —Å—Ä–µ–¥–Ω–∏–π IoU = {best_iou:.3f}")

    # 6) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV:
    results_df = pd.DataFrame(results, columns=['threshold', 'mean_iou'])
    results_csv = Path("results/threshold_iou_results.csv")
    results_csv.parent.mkdir(parents=True, exist_ok=True)
    results_df.to_csv(results_csv, index=False)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Ä–æ–≥–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_csv}")

    # 7) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8, 5))
        plt.plot(results_df['threshold'], results_df['mean_iou'], marker='o')
        plt.xlabel('Threshold')
        plt.ylabel('Mean IoU')
        plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–≥–æ IoU –æ—Ç –ø–æ—Ä–æ–≥–∞')
        plt.grid(True)
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        fig_path = Path("results/threshold_vs_iou.png")
        plt.savefig(fig_path)
        print(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {fig_path}")
        # –ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –≤ Jupyter, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ plt.show()
    except ImportError:
        print("matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")

if __name__ == "__main__":
    main()
